#BlueJ class context
comment0.target=Poly
comment0.text=\r\n\ Class\ to\ represent\ a\ polynomial,\ e.g.\ 3.5x^4\ +\ 3x^2\ -\ 4.\r\n\ \r\n\ Polynomials\ can\ be\ added,\ subtracted,\ multiplied,\ and\ divided.\r\n\ \r\n\ This\ class\ is\ a\ skeleton.\ You\ need\ to\ provide\ implementations\r\n\ for\ the\ methods\ here\ defined.\ Feel\ free\ however,\ to\ add\ additional\r\n\ methods\ as\ you\ see\ fit.\r\n\r\n\ @author\ Riik\ Acharya\r\n\ @version\ 1.0\r\n
comment1.params=coef\ exp
comment1.target=Poly(double,\ int)
comment1.text=\r\n\ Creates\ a\ new\ polynomial\ containing\ a\ single\ term\ with\ the\ coefficient\r\n\ and\ exponent\ passed\ in\ as\ arguments.\ E.g.\ when\ called\ with\ coefficient\r\n\ 3.5\ and\ exponent\ 2,\ it\ should\ create\ a\ polynomial\ 3.5x^2.\r\n\ \r\n\ You\ can\ create\ additional\ constructors\ if\ you'd\ like,\ but\ it's\ \r\n\ imperative\ that\ this\ one\ exists.\r\n\ \r\n\ @param\ coef\ the\ single\ term's\ coefficient.\r\n\ @param\ exp\ the\ single\ term's\ exponent.\r\n\ @return\ the\ polynomial\ created.\r\n
comment10.params=
comment10.target=void\ sortPolys()
comment10.text=\r\n\ sorts\ array\ of\ monomials\ from\ least\ to\ greates\ exponent\r\n
comment11.params=
comment11.target=boolean\ isZero()
comment11.text=\r\n\ Returns\ true\ if\ polynomial\ is\ equal\ to\ 0,\ false\ otherwise\r\n\ \r\n\ @returns\ boolean\ telling\ whether\ polynomial\ is\ equal\ to\ 0\r\n
comment12.params=
comment12.target=void\ removeZeroCoef()
comment12.text=\r\n\ removes\ all\ monomials\ from\ polyArray\ that\ have\ zero\ as\ their\ coefficient\r\n
comment13.params=index\ possibleSpace\ possibleMinus
comment13.target=java.lang.String\ addIfCoefIsMinusOneOrOne(int,\ java.lang.String,\ java.lang.String)
comment13.text=\r\n\ If\ a\ monomial\ coefficient\ is\ -1\ or\ 1,\ this\ method\ is\ invoked\ to\ determine\ how\ the\ string\ is\ printed\ in\ each\ special\ circumstance.\r\n\ \r\n\ @param\ index\ of\ the\ array,\ and\ String\ containing\ a\ possible\ space\ after\ the\ monomial\ is\ printed\r\n\ @return\ String\ of\ printed\ monomial\r\n
comment2.params=
comment2.target=Poly()
comment2.text=\r\n\ Creates\ an\ empty\ polynomial\ containing\ a\ single\ term\ with\ the\ coefficient\r\n\ and\ exponent\ passed\ in\ as\ arguments.\ E.g.\ when\ called\ with\ coefficient\r\n\ 3.5\ and\ exponent\ 2,\ it\ should\ create\ a\ polynomial\ 3.5x^2.\r\n\ \r\n\ You\ can\ create\ additional\ constructors\ if\ you'd\ like,\ but\ it's\ \r\n\ imperative\ that\ this\ one\ exists.\r\n\ \r\n\ @return\ the\ polynomial\ created.\r\n
comment3.params=p
comment3.target=Poly\ add(Poly)
comment3.text=\r\n\ Adds\ the\ polynomial\ passed\ in\ as\ an\ argument,\ p,\ to\ the\ polynomial\ on\ which\ the\ \r\n\ method\ is\ called\ on\ (the\ "this"\ polynomial),\ and\ returns\ a\ new\ polynomial\r\n\ with\ the\ result.\ I.e.,\ it\ returns\ "this\ +\ p".\r\n\ \r\n\ @param\ p\ the\ polynomial\ to\ add\ onto\ the\ polynomial\ on\ which\ the\ method\ is\ called\ on.\r\n\ @return\ a\ polynomial\ representing\ the\ result\ of\ the\ addition.\r\n
comment4.params=p
comment4.target=Poly\ subtract(Poly)
comment4.text=\r\n\ Subtracts\ the\ polynomial\ passed\ in\ as\ an\ argument,\ p,\ from\ the\ polynomial\ on\ which\ the\ \r\n\ method\ is\ called\ on\ (the\ "this"\ polynomial),\ and\ returns\ a\ new\ polynomial\r\n\ with\ the\ result.\ I.e.,\ it\ returns\ "this\ -\ p".\r\n\ \r\n\ @param\ p\ the\ polynomial\ to\ be\ subtracted\ from\ the\ polynomial\ on\ which\ the\ method\ is\ called\ on.\r\n\ @return\ a\ polynomial\ representing\ the\ result\ of\ the\ subtraction.\r\n
comment5.params=p
comment5.target=Poly\ multiply(Poly)
comment5.text=\r\n\ Multiplies\ the\ polynomial\ passed\ in\ as\ an\ argument,\ p,\ by\ the\ polynomial\ on\ which\ the\ \r\n\ method\ is\ called\ on\ (the\ "this"\ polynomial),\ and\ returns\ a\ new\ polynomial\r\n\ with\ the\ result.\ I.e.,\ it\ returns\ "this\ *\ p".\r\n\ \r\n\ @param\ p\ the\ polynomial\ to\ be\ multiplied\ by\ the\ polynomial\ on\ which\ the\ method\ is\ called\ on.\r\n\ @return\ a\ polynomial\ representing\ the\ result\ of\ the\ multiplication.\r\n
comment6.params=p
comment6.target=Poly\ divide(Poly)
comment6.text=\r\n\ Divides\ the\ polynomial\ on\ which\ the\ method\ is\ called\ on\ (the\ "this"\ polynomial),\ by\r\n\ the\ polynomial\ passed\ in\ as\ an\ argument,\ p,\ and\ returns\ a\ new\ polynomial\r\n\ with\ the\ resulting\ quotient.\ I.e.,\ it\ returns\ "this\ /\ p".\r\n\ \r\n\ The\ division\ should\ be\ performed\ according\ to\ the\ polynomial\ long\ division\ algorithm\r\n\ (\ https\://en.wikipedia.org/wiki/Polynomial_long_division\ ).\r\n\ \r\n\ Polynomial\ division\ may\ end\ with\ a\ non-zero\ remainder,\ which\ means\ the\ polynomials\ are\r\n\ indivisible.\ In\ this\ case\ the\ method\ should\ return\ null.\ A\ division\ by\ zero\ should\ also\r\n\ yield\ a\ null\ return\ value.\r\n\ \r\n\ @param\ p\ the\ polynomial\ to\ be\ multiplied\ by\ the\ polynomial\ on\ which\ the\ method\ is\ called\ on.\r\n\ @return\ a\ polynomial\ representing\ the\ quotient\ of\ the\ division,\ or\ null\ if\ they're\ indivisible.\r\n
comment7.params=o
comment7.target=boolean\ equals(java.lang.Object)
comment7.text=\r\n\ Compares\ the\ polynomial\ on\ which\ the\ method\ is\ called\ (the\ "this"\ polynomial),\ \r\n\ to\ the\ object\ passed\ in\ as\ argument,\ o.\ o\ is\ to\ be\ considered\ equal\ to\ the\ "this"\r\n\ polynomial\ if\ they\ both\ represent\ equivalent\ polynomials.\r\n\ \r\n\ E.g.,\ "3.0x^4\ +\ 0.0x^2\ +\ 5.0"\ and\ "3.0x^4\ +\ 5.0"\ should\ be\ considered\ equivalent.\r\n\ "3.0x^4\ +\ 5.0"\ and\ "3.0x^4\ +\ 3.0"\ should\ not.\r\n\ \r\n\ @param\ o\ the\ object\ to\ be\ compared\ against\ the\ polynomial\ the\ method\ is\ called\ on.\r\n\ @return\ true\ if\ o\ is\ a\ polynomial\ equivalent\ to\ the\ one\ the\ method\ was\ called\ on,\r\n\ and\ false\ otherwise.\r\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\r\n\ Returns\ a\ textual\ representation\ of\ the\ polynomial\ the\ method\ is\ called\ on.\r\n\ The\ textual\ representation\ should\ be\ a\ sum\ of\ monomials,\ with\ each\ monomial\ \r\n\ being\ defined\ by\ a\ double\ coefficient,\ the\ letters\ "x^",\ and\ an\ integer\ exponent.\r\n\ Exceptions\ to\ this\ rule\:\ coefficients\ of\ 1.0\ should\ be\ omitted,\ as\ should\ "^1",\r\n\ and\ "x^0".\r\n\ \r\n\ Terms\ should\ be\ listed\ in\ decreasing-exponent\ order.\ Terms\ with\ zero-coefficient\r\n\ should\ be\ omitted.\ Each\ exponent\ can\ only\ appear\ once.\ \r\n\ \r\n\ Rules\ for\ separating\ terms,\ applicable\ to\ all\ terms\ other\ that\ the\ largest\ exponent\ one\:\r\n\ \ \ -\ Terms\ with\ positive\ coefficients\ should\ be\ preceeded\ by\ "\ +\ ".\r\n\ \ \ -\ Terms\ with\ negative\ coefficients\ should\ be\ preceeded\ by\ "\ -\ ".\r\n\ \r\n\ Rules\ for\ the\ highest\ exponent\ term\ (i.e.,\ the\ first)\:\r\n\ \ \ -\ If\ the\ coefficient\ is\ negative\ it\ should\ be\ preceeded\ by\ "-".\ E.g.\ "-3.0x^5".\r\n\ \ \ -\ If\ the\ coefficient\ is\ positive\ it\ should\ not\ preceeded\ by\ anything.\ E.g.\ "3.0x^5".\r\n\ \r\n\ The\ zero/empty\ polynomial\ should\ be\ represented\ as\ "0.0".\r\n\ \r\n\ Examples\ of\ valid\ representations\:\ \r\n\ \ \ -\ "2.0x^2\ +\ 3.0"\r\n\ \ \ -\ "3.5x\ +\ 3.0"\r\n\ \ \ -\ "4.0"\r\n\ \ \ -\ "-2.0x"\r\n\ \ \ -\ "4.0x\ -\ 3.0"\r\n\ \ \ -\ "0.0"\r\n\ \ \ \r\n\ Examples\ of\ invalid\ representations\:\ \r\n\ \ \ -\ "+2.0x^2+3.0x^0"\r\n\ \ \ -\ "3.5x\ -3.0"\r\n\ \ \ -\ "-\ 4.0\ +\ x"\r\n\ \ \ -\ "-4.0\ +\ x^7"\r\n\ \ \ -\ ""\r\n\ \r\n\ @return\ a\ textual\ representation\ of\ the\ polynomial\ the\ method\ was\ called\ on.\r\n
comment9.params=
comment9.target=java.util.ArrayList\ getArray()
comment9.text=\r\n\ Returns\ an\ object\ reference\ to\ the\ array\ of\ monomials\r\n\ \r\n\ @return\ object\ reference\ to\ the\ array\ of\ monomials\r\n
numComments=14
